import React, { useState, useEffect, useCallback } from 'react';
import {
    Box,
    Button,
    TextField,
    Grid,
    Paper,
    Typography,
    CircularProgress,
    Alert,
    IconButton,
    Dialog,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
    Tab,
    Tabs,
    Container
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import CameraIcon from '@mui/icons-material/Camera';
import ViewInArIcon from '@mui/icons-material/ViewInAr';
import HLSPlayer from '../components/HLSPlayer';
import BagDetectionControls from '../components/BagDetectionControls'; // Import the new component

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';
const HLS_BASE_URL = process.env.REACT_APP_HLS_URL || 'http://localhost:8888'; // MediaMTX HLS endpoint

function CameraFeed() {
    const [cameras, setCameras] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [newCameraName, setNewCameraName] = useState('');
    const [newCameraUrl, setNewCameraUrl] = useState(''); // Full RTSP URL input
    const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
    const [cameraToDelete, setCameraToDelete] = useState(null);
    const [tabValue, setTabValue] = useState(0);
    const [selectedCamera, setSelectedCamera] = useState(null);

    const fetchCameras = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
            const response = await fetch(`${API_URL}/cameras`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            // Filter out potentially invalid entries if needed, e.g., where name or url is missing
            setCameras(data.filter(cam => cam.name && cam.url));
        } catch (e) {
            console.error("Failed to fetch cameras:", e);
            setError(`Failed to load cameras. ${e.message}`);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchCameras();
    }, [fetchCameras]);

    const handleAddCamera = async (e) => {
        e.preventDefault();
        if (!newCameraName.trim() || !newCameraUrl.trim()) {
            setError('Camera name and RTSP URL cannot be empty.');
            return;
        }
         if (!newCameraUrl.toLowerCase().startsWith('rtsp://')) {
            setError('URL must start with rtsp://');
            return;
        }
        setError('');
        try {
            const response = await fetch(`${API_URL}/add_camera_url`, { // Use the correct endpoint
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name: newCameraName, url: newCameraUrl }),
            });
            if (!response.ok) {
                const errData = await response.json();
                throw new Error(errData.error || `HTTP error! status: ${response.status}`);
            }
            setNewCameraName('');
            setNewCameraUrl('');
            // Optimistically add or wait a bit for MediaMTX restart?
            // For now, just refetch after a delay
            setTimeout(fetchCameras, 2000); // Refresh list after 2s
        } catch (e) {
            console.error("Failed to add camera:", e);
            setError(`Failed to add camera: ${e.message}`);
        }
    };

     const handleDeleteClick = (cameraName) => {
        setCameraToDelete(cameraName);
        setDeleteConfirmOpen(true);
    };

    const handleDeleteConfirm = async () => {
        if (!cameraToDelete) return;
        setError('');
        try {
            const response = await fetch(`${API_URL}/delete_camera/${cameraToDelete}`, {
                method: 'DELETE',
            });
            if (!response.ok) {
                const errData = await response.json();
                throw new Error(errData.error || `HTTP error! status: ${response.status}`);
            }
            setDeleteConfirmOpen(false);
            setCameraToDelete(null);
            // Refresh list after a short delay to allow server restart
            setTimeout(fetchCameras, 2000); 
        } catch (e) {
            console.error("Failed to delete camera:", e);
            setError(`Failed to delete camera ${cameraToDelete}: ${e.message}`);
            setDeleteConfirmOpen(false);
        }
    };

    const handleDeleteCancel = () => {
        setDeleteConfirmOpen(false);
        setCameraToDelete(null);
    };

    return (
        <Box sx={{ p: 3 }}>
            <Typography variant="h4" component="h1" gutterBottom>
                Camera Management
            </Typography>
            
            <Tabs
                value={tabValue}
                onChange={(event, newValue) => setTabValue(newValue)}
                variant="fullWidth"
                sx={{ mb: 3 }}
            >
                <Tab label="Camera Feeds" icon={<CameraIcon />} iconPosition="start" />
                <Tab label="Bag Detection" icon={<ViewInArIcon />} iconPosition="start" />
            </Tabs>

            {tabValue === 0 ? (
                <Box>
                    <Paper elevation={0} sx={{ p: 3, mb: 3, border: '1px solid #E0E0E0', borderRadius: 2 }}>
                        {/* Camera Addition Form */}
                        <Typography variant="h6" sx={{ mb: 2 }}>Add Camera</Typography>
                        <Box component="form" onSubmit={handleAddCamera} sx={{ display: 'flex', gap: 2 }}>
                            <TextField
                                label="Camera Name"
                                variant="outlined"
                                size="small"
                                value={newCameraName}
                                onChange={(e) => setNewCameraName(e.target.value)}
                                required
                                helperText="Used in the HLS URL (e.g., cam1)"
                            />
                            <TextField
                                label="Full RTSP URL"
                                variant="outlined"
                                size="small"
                                value={newCameraUrl}
                                onChange={(e) => setNewCameraUrl(e.target.value)}
                                required
                                sx={{flexGrow: 1}}
                                placeholder="rtsp://user:pass@host:port/path"
                            />
                            <Button type="submit" variant="contained" color="primary">
                                Add Camera
                            </Button>
                        </Box>
                    </Paper>

                    {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

                    {/* Camera Grid */} 
                    {loading ? (
                        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 5 }}>
                            <CircularProgress />
                        </Box>
                    ) : (
                        cameras.length === 0 ? (
                            <Typography sx={{mt: 2}}>No cameras configured yet. Add one using the form above.</Typography>
                        ) : (
                            <Grid container spacing={2}>
                                {cameras.map((cam) => (
                                    <Grid item key={cam.name} xs={12} sm={6} md={4} lg={3}> 
                                        <Box sx={{ position: 'relative'}}> 
                                            <HLSPlayer 
                                                name={cam.name} 
                                                url={`${HLS_BASE_URL}/${cam.name}/index.m3u8`} 
                                                onDelete={null} // Pass delete handler if needed inside HLSPlayer
                                                onClick={() => setSelectedCamera(cam.name)}
                                            />
                                            {/* Add delete button externally if preferred */}
                                            <IconButton 
                                                onClick={() => handleDeleteClick(cam.name)} 
                                                size="small" 
                                                color="error"
                                                sx={{
                                                    position: 'absolute',
                                                    top: 8,
                                                    right: 8,
                                                    backgroundColor: 'rgba(0, 0, 0, 0.4)',
                                                    '&:hover': {
                                                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                                                    },
                                                    color: 'white',
                                                    padding: '2px' // Smaller padding
                                                }}
                                            >
                                                <DeleteIcon fontSize="small" />
                                            </IconButton>
                                        </Box>
                                    </Grid>
                                ))}
                            </Grid>
                        )
                    )}
                </Box>
            ) : (
                <Paper elevation={0} sx={{ p: 3, mb: 3, border: '1px solid #E0E0E0', borderRadius: 2 }}>
                    <Typography variant="h6" sx={{ mb: 3 }}>Cement Bag Detection</Typography>
                    
                    {cameras.length === 0 ? (
                        <Alert severity="info" sx={{ mb: 2 }}>
                            No cameras configured yet. Add cameras in the Camera Feeds tab first.
                        </Alert>
                    ) : (
                        <>
                            <Typography variant="subtitle1" gutterBottom>
                                Select a camera to enable bag detection:
                            </Typography>
                            <Grid container spacing={2} sx={{ mb: 3 }}>
                                {cameras.map((cam) => (
                                    <Grid item key={cam.name}>
                                        <Button 
                                            variant={selectedCamera === cam.name ? "contained" : "outlined"}
                                            onClick={() => setSelectedCamera(cam.name)}
                                            startIcon={<CameraIcon />}
                                        >
                                            {cam.name}
                                        </Button>
                                    </Grid>
                                ))}
                            </Grid>
                            
                            {selectedCamera ? (
                                <>
                                    <BagDetectionControls cameraName={selectedCamera} />
                                    
                                    <Box sx={{ mt: 3 }}>
                                        <Typography variant="h6" gutterBottom>Live Detection Feed</Typography>
                                        <Box sx={{
                                            width: '100%',
                                            height: '400px',
                                            backgroundColor: '#f0f0f0',
                                            display: 'flex',
                                            alignItems: 'center',
                                            justifyContent: 'center',
                                            position: 'relative'
                                        }}>
                                            <img 
                                                src={`${API_URL}/cameras/${selectedCamera}/detection/frame`}
                                                alt="Detection Feed"
                                                style={{
                                                    maxWidth: '100%',
                                                    maxHeight: '100%',
                                                    objectFit: 'contain'
                                                }}
                                            />
                                            <Box sx={{
                                                position: 'absolute',
                                                bottom: 10,
                                                right: 10,
                                                bgcolor: 'rgba(0,0,0,0.6)',
                                                color: 'white',
                                                padding: '4px 8px',
                                                borderRadius: 1,
                                                fontSize: 12
                                            }}>
                                                Live YOLOv8 Detection
                                            </Box>
                                        </Box>
                                    </Box>
                                </>
                            ) : (
                                <Alert severity="info">
                                    Please select a camera to enable bag detection.
                                </Alert>
                            )}
                        </>
                    )}
                </Paper>
            )}

            {/* Delete Confirmation Dialog */}
            <Dialog
                open={deleteConfirmOpen}
                onClose={handleDeleteCancel}
            >
                <DialogTitle>Confirm Camera Deletion</DialogTitle>
                <DialogContent>
                    <DialogContentText>
                        Are you sure you want to delete the camera feed "{cameraToDelete}"? 
                        This will remove it from the MediaMTX configuration.
                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleDeleteCancel}>Cancel</Button>
                    <Button onClick={handleDeleteConfirm} color="error" autoFocus>
                        Delete
                    </Button>
                </DialogActions>
            </Dialog>
        </Box>
    );
}

export default CameraFeed;
